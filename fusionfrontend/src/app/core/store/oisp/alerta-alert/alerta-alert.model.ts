/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

export class AlertaResponse {
  alerts: AlertaAlert[];
  autoRefresh: boolean;
  lastTime: Date;
  more: boolean;
  page: number;
  pageSize: number;
  pages: number;
  severityCounts: any[];
  status: string;
  statusCounts: any[];
  total: number;
}

export declare type IdString = string;

/**
 * @see <a href="https://docs.alerta.io/api/reference.html#alerts">https://docs.alerta.io/api/reference.html#alerts</a>
 * All not required attributes are marked optional.
 */
export class AlertaAlert {
  /** Autogenerated uuid */
  id: string;

  /** The technical name (deviceId) of the alert causing device */
  resource: IdString;

  event: string;
  environment: string;
  severity: AlertSeverity;
  correlate?: any[];
  status: AlertStatus;
  service: any[];
  group?: string;
  value: string;
  text: string;
  tags?: Set<any>;
  attributes: any;
  origin?: string;
  type?: string;
  createTime?: Date;
  timeout?: number;
  rawData?: string;

  public static mapSeverityToSecurityCode(severity: AlertSeverity): number {
    switch (severity) {
      case AlertSeverity.SECURITY:
        return 0;
      case AlertSeverity.CRITICAL:
        return 1;
      case AlertSeverity.MAJOR:
        return 2;

      case AlertSeverity.MINOR:
        return 3;
      case AlertSeverity.WARNING:
        return 4;

      case AlertSeverity.INFORMATIONAL:
        return 5;
      case AlertSeverity.DEBUG:
        return 6;
      case AlertSeverity.TRACE:
        return 7;
      case AlertSeverity.INDETERMINATE:
        return 8;
      case AlertSeverity.CLEARED:
      case AlertSeverity.NORMAL:
      case AlertSeverity.OK:
        return 9;
      case AlertSeverity.UNKNOWN:
        return 10;

      default:
        return null;
    }
  }

  public static mapSeverityToIFAlertSeverity(severity: AlertSeverity): IFAlertSeverity {
    const severityCode = this.mapSeverityToSecurityCode(severity);

    if (severityCode == null) {
      return null;
    }
    else if (severityCode <= this.mapSeverityToSecurityCode(AlertSeverity.MAJOR)) { // security - major
      return IFAlertSeverity.HIGH;
    } else if (severityCode <= this.mapSeverityToSecurityCode(AlertSeverity.WARNING)) { // mino - warning
      return IFAlertSeverity.MEDIUM;
    } else { // informational - unknown
      return IFAlertSeverity.LOW;
    }
  }

  public static mapStatusToStatusCode(status: AlertStatus): number {
    switch (status) {
      case AlertStatus.OPEN:
        return 1;
      case AlertStatus.ASSIGN:
        return 2;
      case AlertStatus.ACK:
        return 3;
      case AlertStatus.CLOSED:
        return 4;
      case AlertStatus.EXPIRED:
        return 5;
      case AlertStatus.BLACKOUT:
        return 6;
      case AlertStatus.SHELVED:
        return 7;
      case AlertStatus.UNKNOWN:
        return 9;
    }
  }

  public static getMoreCriticalIFAlertSeverity(severity1: IFAlertSeverity, severity2: IFAlertSeverity): IFAlertSeverity {
    if (!severity1) {
      return severity2;
    } else if (!severity2) {
      return severity1;
    }

    return Math.min(Number(severity1), Number(severity2)) as IFAlertSeverity;
  }

  public static mapStatusToIfAlertStatus(status: AlertStatus): IFAlertStatus {
    if (status === AlertStatus.OPEN || status === AlertStatus.ASSIGN || status === AlertStatus.UNKNOWN) {
      return IFAlertStatus.OPEN;
    } else {
      return IFAlertStatus.CLEARED;
    }
  }
}

/**
 * @see <a href="https://docs.alerta.io/api/alert.html#severity-table">https://docs.alerta.io/api/alert.html#severity-table</a>
 */
export enum AlertSeverity {
  SECURITY = 'security',
  CRITICAL = 'critical',
  MAJOR = 'major',
  MINOR = 'minor',
  WARNING = 'warning',
  INFORMATIONAL = 'informational',
  DEBUG = 'debug',
  TRACE = 'trace',
  INDETERMINATE = 'indeterminate',
  CLEARED = 'cleared',
  NORMAL = 'normal',
  OK = 'ok',
  UNKNOWN = 'unknown'
}

export enum IFAlertSeverity {
  HIGH = 1,
  MEDIUM = 2,
  LOW = 3
}

/**
 * @see <a href="https://docs.alerta.io/api/alert.html#alert-status">https://docs.alerta.io/api/alert.html#alert-status</a>
 */
export enum AlertStatus {
  OPEN = 'open',
  ASSIGN = 'assign',
  ACK = 'ack',
  CLOSED = 'closed',
  EXPIRED = 'expired',
  BLACKOUT = 'blackout',
  SHELVED = 'shelved',
  UNKNOWN = 'unknown',
}

export enum IFAlertStatus {
  OPEN,
  CLEARED
}
